#按照月份自定义水平分表策略配置
spring:
  main:
    allow-bean-definition-overriding: true
  shardingsphere:
    props:
      sql:
        show: true
    datasource:
      # 数据源名称，多数据源以逗号分隔
      names: m1
      m1:
        password: 15090667928Hh_
        url: jdbc:mysql://182.92.219.xxx:3306/sharding_db-1?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
        username: root
        driver-class-name: com.mysql.cj.jdbc.Driver
        # 数据库连接池类名称  com.alibaba.druid.pool.DruidDataSource  com.zaxxer.hikari.HikariDataSource
        type: com.alibaba.druid.pool.DruidDataSource
#    rules:
    sharding:
      tables:
        course:
          key-generator:
            column: id
            #主键生成策略 可选内置的 SNOWFLAKE(雪花算法)/UUID
            # 也可以自定义(实现ShardingKeyGenerator,并配置META-INF/services/org.apache.shardingsphere.spi.keygen.ShardingKeyGenerator) SIMPLE
            type: SNOWFLAKE
          #配置 t_order 表规则  ->{a..b}  a必须存在，否则分布式主键无法获取
          actual-data-nodes: m1.course_$->{2021..2200}0$->{1..9},m1.course_$->{2021..2200}$->{10..12}
          #actual-data-nodes: m1.course_xxx10$->{1..7}
#          database-strategy:
#            standard:
#              precise-algorithm-class-name: com.xlhj.sharding.config.CoursePreciseShardingAlgorithm
#              range-algorithm-class-name: com.xlhj.sharding.config.TableRangeShardAlgorithm
#              sharding-column: create_time
          table-strategy:
            standard:
              #精确分片算法类名称，用于 = 和 IN。该类需实现PreciseShardingAlgorithm 接口并提供无参数的构造器
              precise-algorithm-class-name: com.xlhj.sharding.config.CoursePreciseShardingAlgorithm
              # 范围分片算法类名称，用于 BETWEEN，可选。该类需实现RangeShardingAlgorithm 接口并提供无参数的构造器
              range-algorithm-class-name: com.xlhj.sharding.config.TableRangeShardAlgorithm
              sharding-column: create_time